name: Deploy to VPS

on:
  push:
    branches:
      - main

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Step 1: Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Step 4: Log in to GHCR using PAT
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: obaidurrehmankhan   # your GitHub username
          password: ${{ secrets.GHCR_PAT }}

      # Step 5: Build & push images (:sha and :latest)
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./api   # Dockerfile is in api/
          file: ./api/Dockerfile
          push: true
          no-cache: true   # ðŸ‘ˆ force fresh rebuild, avoid old cached deps
          tags: |
            ghcr.io/obaidurrehmankhan/nestjs-docker-postgres-onprem:${{ github.sha }}
            ghcr.io/obaidurrehmankhan/nestjs-docker-postgres-onprem:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      # Step 6: Security scan with Trivy (fail on HIGH/CRITICAL vulns)
      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ghcr.io/obaidurrehmankhan/nestjs-docker-postgres-onprem:${{ github.sha }}
          severity: CRITICAL
          exit-code: 1
          ignore-unfixed: true

      # Step 7: Deploy to VPS
      - name: Deploy on VPS
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ~/onprem-app
            docker compose pull
            docker compose up -d
            docker compose exec api npm run migration:run
